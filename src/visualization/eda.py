import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime


df = pd.read_csv("../data/final.csv")


def save_bar_chart(data, x_col, y_col, title, filename):
    grouped = data.groupby(x_col).size().reset_index(name="frecuencia")
    grouped = grouped.sort_values(by="frecuencia", ascending=False)
    fig = plt.figure(figsize=(10, 6))
    sns.barplot(x="frecuencia", y=x_col, data=grouped)
    plt.title(title)
    plt.xlabel("Frecuencia")
    plt.ylabel("Categorías")
    plt.savefig(filename, dpi=300, bbox_inches="tight")
    plt.close(fig)


save_bar_chart(
    df,
    "fuente_de_apoyo",
    "frecuencia",
    "Frecuencia de las Categorías de la Variable Fuente de Apoyo",
    "../visualization/fuente_de_apoyo.png",
)

save_bar_chart(
    df,
    "otras_actividades_actuales",
    "frecuencia",
    "Frecuencia de las Categorías de la Variable Otras Actividades Actuales",
    "../visualization/otras_actividades_actuales.png",
)

save_bar_chart(
    df,
    "tipo_involucramiento_anterior",
    "frecuencia",
    "Frecuencia de las Categorías de la Variable Tipo de Involucramiento Anterior",
    "../visualization/tipo_involucramiento_anterior.png",
)

save_bar_chart(
    df,
    "categoria",
    "frecuencia",
    "Frecuencia de las Categorías de la Variable Categoría Vulnerabilidad",
    "../visualization/categoria.png",
)


save_bar_chart(
    df,
    "programa_de_pregrado",
    "frecuencia",
    "Frecuencia de los Programas de Pregrado",
    "../visualization/programa_de_pregrado.png",
)


save_bar_chart(
    df,
    "tipo_de_admision",
    "frecuencia",
    "Frecuencia en el tipo de admision",
    "../visualization/tipo_de_admision.png",
)


def _distribucion_plot(df, column_name, title, binwidth):
    # Replace 'mal dato' with NA, drop NA and convert to float
    df[column_name] = df[column_name].replace("mal dato", pd.NA)
    df = df.dropna(subset=[column_name])
    df[column_name] = df[column_name].astype(float)

    # Create a figure
    fig = plt.figure(figsize=(15, 8))

    # Plot histogram
    sns.histplot(
        df[column_name],
        bins=100,
        kde=True,
        color="steelblue",
        edgecolor="black",
        binwidth=binwidth,
    )
    plt.title(title)
    plt.xlabel(column_name)
    plt.ylabel("Density")
    plt.grid(True, linestyle="--", alpha=0.5)

    # Save the figure
    fig.savefig(f"../visualization/{column_name}.png", dpi=300, bbox_inches="tight")


# Plotting
_distribucion_plot(df, "edad", "Distribucion Edad", 1)
_distribucion_plot(df, "papa", "Distribucion PAPA", 0.1)
_distribucion_plot(df, "progreso", "Distribucion Avance Carrera", 1)
_distribucion_plot(df, "numero_de_matricula", "Distribucion Matricula", 1)
_distribucion_plot(df, "pbm", "Distribucion PBM", 1)
_distribucion_plot(
    df, "creditos_inscritos_semestre", "Distribucion Creditos Inscritos", 1
)


def plot_counts(df, column_name, title):
    fig = plt.figure(figsize=(8, 6))
    ax = sns.countplot(x=column_name, data=df, color="steelblue")
    ax.set_xticklabels(["No", "Si"])
    plt.title(title)
    plt.xlabel(column_name)
    plt.ylabel("Count")
    plt.grid(True, linestyle="--", alpha=0.5)
    fig.savefig(f"../visualization/{column_name}.png", dpi=300, bbox_inches="tight")


plot_counts(df, "apoyo_economico", "Conteo Apoyo Economico")
plot_counts(df, "involucramiento_anterior_bienestar", "Conteo Apoyo Anterior Bienestar")
