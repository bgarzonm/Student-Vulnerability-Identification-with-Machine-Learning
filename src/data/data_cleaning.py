import pandas as pd
import numpy as np
import unicodedata


df = pd.read_excel("../data/Primera fuente.xlsx")

column_mapping = {
    "Tipo de documento de identidad": "Tipo_de_Documento",
    "Fecha de nacimiento:": "Fecha_de_Nacimiento",
    "Dirección de residencia en Bogotá:": "Direccion_de_Residencia_Bogota",
    "Para lugares diferentes a las opciones, mencionar Departamento y Municipio (Ejemplo, Córdoba/San Pelayo)": "Otra_Ubicacion",
    "Nivel de estudio": "Nivel_de_Estudio",
    "Tipo de admisión": "Tipo_de_Admision",
    "Programa curricular de pregrado al cual pertenece (Estudiantes de pregrado)": "Programa_de_Pregrado",
    "Papa": "Padre",
    "Avance": "Progreso",
    "Número de matrícula:": "Numero_de_Matricula",
    "¿Cursa doble titulación?": "Matricula_Doble_Titulacion",
    "Carrera doble titulación": "Programa_Doble_Titulacion",
    "Porcentaje de avance segunda carrera": "Porcentaje_Progreso_Doble_Titulacion",
    "PBM:": "PBM",
    "Estrato": "Estrato_Socioeconomico",
    "¿Presento solicitud de Reubicación socioeconómica? ": "Solicitud_Reubicacion_Socioeconomica",
    "¿Fue aprobada su solicitud de reubicación socioeconómica? ": "Aprobacion_Solicitud_Reubicacion",
    "¿Cuenta con algún apoyo económico de la Universidad o de otra institución? ": "Apoyo_Economico",
    "¿Cuál? ": "Fuente_de_Apoyo",
    "Otras actividades que realice en este momento ": "Otras_Actividades_Actuales",
    "¿Ha estado vinculado con anterioridad a la Dirección de Bienestar de la Facultad de Ingeniería?": "Involucramiento_Anterior_Bienestar",
    "Tipo de vinculación que ha tenido": "Tipo_Involucramiento_Anterior",
    "Número de convocatorias a las cuales ha estado vinculado anteriormente a la Dirección de Bienestar Ingeniería\n": "Convocatorias_Anteriores_Bienestar",
    "En caso de que afirmativo, relacionar resolución y año": "Resolucion_y_Año_Involucramiento_Anterior",
    "Desea confirmar su postulación?": "Confirmacion_Postulacion",
    "Cantidad de créditos inscritos para este semestre": "Creditos_Inscritos_Semestre",
    "Seleccione las condiciones de vulnerabilidad que considera ud aplican para su situación actual": "Condiciones_Vulnerabilidad_Seleccionadas",
    "Si lo desea, explique voluntariamente su condición de vulnerabilidad socioeconómica /académica \n ": "Explicacion_Vulnerabilidad",
    "Ser padre/ Madre/ estar en embarazo": "Padre/Madre/Embarazo",
    "Persona con discapacidad permanente": "Discapacidad_Permanente",
    "Estudiante foráneo sin admsión especial": "Estudiante_Foraneo_Sin_Admsion_Especial",
    "Padre o Madre fallecido": "Padre_o_Madre_Fallecido",
    "PAES, PEAMA, victima de conflicto": "PAES_PEAMA_Victima_Conflicto",
    "Persona con avance inferior al 50%": "Progeso_menor_50",
    "Persona con vulnerabilidad académica": "Vulnerabilidad_Academica",
    "Otros evaluados por área de bienestar": "Otros_Evaluados_Bienestar",
}

# Rename the columns in your DataFrame
df.rename(columns=column_mapping, inplace=True)

# Lista de variables que deseas mantener
variables_deseadas = [
    "Fecha_de_Nacimiento",
    "Nivel_de_Estudio",
    "Tipo_de_Admision",
    "Programa_de_Pregrado",
    "Padre",
    "Progreso",
    "Numero_de_Matricula",
    "Matricula_Doble_Titulacion",
    "Programa_Doble_Titulacion",
    "Porcentaje_Progreso_Doble_Titulacion",
    "PBM",
    "Estrato_Socioeconomico",
    "Solicitud_Reubicacion_Socioeconomica",
    "Aprobacion_Solicitud_Reubicacion",
    "Apoyo_Economico",
    "Fuente_de_Apoyo",
    "Otras_Actividades_Actuales",
    "Involucramiento_Anterior_Bienestar",
    "Tipo_Involucramiento_Anterior",
    "Convocatorias_Anteriores_Bienestar",
    "Resolucion_y_Año_Involucramiento_Anterior",
    "Confirmacion_Postulacion",
    "Creditos_Inscritos_Semestre",
    "Condiciones_Vulnerabilidad_Seleccionadas",
    "Explicacion_Vulnerabilidad",
    "Padre/Madre/Embarazo",
    "Discapacidad_Permanente",
    "Estudiante_Foraneo_Sin_Admsion_Especial",
    "Padre_o_Madre_Fallecido",
    "PAES_PEAMA_Victima_Conflicto",
    "Progeso_menor_50",
    "Vulnerabilidad_Academica",
    "Otros_Evaluados_Bienestar",
]

# Filtrar el DataFrame para mantener solo las columnas deseadas
df = df[variables_deseadas]


# Función para eliminar tildes
def eliminar_tildes(texto):
    return "".join(
        (
            c
            for c in unicodedata.normalize("NFD", texto)
            if unicodedata.category(c) != "Mn"
        )
    )


# Convertir columnas a minúsculas y eliminar tildes
df.columns = df.columns.str.lower().map(eliminar_tildes)

# El progreso puede ser cero porque es el primer semestre

df["progreso"] = df["progreso"].fillna(0)


# convertimos si esta estudiando doble ingenieria 1 si es TRUE 0 si es falso
df["programa_doble_titulacion"] = df["programa_doble_titulacion"].apply(
    lambda x: 1 if "ingeniería" in str(x).lower() else 0
)
df["porcentaje_progreso_doble_titulacion"] = pd.to_numeric(
    df["porcentaje_progreso_doble_titulacion"], errors="coerce"
).fillna(0)

df["fuente_de_apoyo"].unique()


# Convertir todos los valores a minúsculas
df["fuente_de_apoyo"] = df["fuente_de_apoyo"].fillna(0)

df["fuente_de_apoyo"] = df["fuente_de_apoyo"].str.lower()

# Eliminar espacios en blanco al principio o al final de los valores
df["fuente_de_apoyo"] = df["fuente_de_apoyo"].str.strip()

# Reemplazar valores inconsistentes o similares con valores uniformes
df["fuente_de_apoyo"] = df["fuente_de_apoyo"].replace(
    {
        "almuerzo": "alimentación",
        "generacion e": "generación e",
        "generacion_e": "generación e",
        "alimentario": "alimentación",
        "apoyo alimentario básico - almuerzo": "alimentación",
        "generación e excelencia": "generación e",
        "tramporte": "transporte",
        "básica total - almuerzo": "alimentación",
        "no": 0,
        "n,a": 0,
        "tengo exención del pago de matrícula por mi promedio": "promedio",
        "programa de alimentacion": "alimentación",
        "no aplica": 0,
        "apoyo básica alimentaria desayuno": "alimentación",
        "alimentación (almuerzo)": "alimentación",
        "ninguna": 0,
        "apoyo transporte": "transporte",
        "jóvenes en acción": "jovenes en acción",
        "apoyo alimentario y jovenes en acción": "alimentación y jóvenes en acción",
        "un credito de sostenimiento, el cual no me alcanza,": "crédito sostenimiento",
        "promotor de convivencia": "promotor de convivencia",
        "promotores de convivencia 2022-01(finalizando último cumplido)": "promotor de convivencia",
        "apoyo alimentario y de transporte,": "alimentación y transporte",
        "apoyo de transporte": "transporte",
        "apoyo alimentario de almuerzo": "alimentación",
        "becario": "becario",
        "almuerzo, transporte": "almuerzo y transporte",
        "spp3": "ser pilo paga",
        "apoyo alimentario": "alimentación",
        "crédito sostenimiento icetex": "crédito sostenimiento",
        "almuerzo y transporte": "alimentación y transporte",
        "almuerzo basico": "alimentación",
        "desayuno": "alimentación",
        "almuerzo en la universidad": "alimentación",
        "apoyo de alimentación y transporte": "alimentación y transporte",
        "descuento mejores promedios": "promedio",
        "almuerzo total": "alimentación",
        "ninguno": 0,
        "alojamiento": "alojamiento",
        "desayunos": "alimentación",
        "transporte y almuerzo": "alimentación y transporte",
        "bono alimentario": "alimentación",
        "alimentación-almuerzo": "alimentación",
        "cena": "alimentación",
        "alimentario y gen e": "alimentación y generacion e",
        "jovenes en acción": "jóvenes en acción",
        "alimentación y jóvenes en acción": "alimentación y jóvenes en acción",
        "promotor de convivencia": "promotor",
        "promotores": "promotor",
        "apoyo desayuno": "alimentación",
        "desayuno y transporte": "alimentación y transporte",
        "bono de alimento": "alimentación",
        "becario": "becario",
        "ser_pilo_paga": "ser pilo paga",
        "equidad": "equidad",
        "programa promotores": "promotor",
        "alimentario - desayuno": "alimentación",
        "apoyo a tutorias": 0,
        "ser pilo paga 4": "ser pilo paga",
        "promotores de convivencia 2022 1": "promotor",
        "vinculación a promotor de convivencia": "promotor",
        "alojamiento, y alimentación": "alimentacion y alojamiento",
        "matricula cero": 0,
    }
)

# Llenar datos faltantes con cero
df["fuente_de_apoyo"].fillna(0, inplace=True)

df["fuente_de_apoyo"] = df["fuente_de_apoyo"].apply(
    lambda x: "ninguno" if x == 0 else x
)


df["otras_actividades_actuales"] = df["otras_actividades_actuales"].replace(
    {
        "Trabajar en confección": "Trabajo",
        "tengo un emprendimiento de venta de ropa": "Trabajo",
        "Trabajo informal": "Trabajo",
        "Trabajar en lo que salga": "Trabajo",
        "Uno que otro trabajo por ahí, para cubrir los gastos,": "Trabajo",
        "Trabajar los fines de semana": "Trabajo",
        "Trabajo en tiempos libres,": "Trabajo",
        "Trabajo en el centro": "Trabajo",
        "Trabajo": "Trabajo",
        "Trabajo algunos fines de semana": "Trabajo",
        "Dar tutorías personalizadas": "Trabajo",
        "Realizar y vender algunas artesanías": "Trabajo",
        "Estudiar y trabajar en chazas": "Trabajo",
        "ESTUDIAR": "No trabajo",
        "Sólo estudiar": "No trabajo",
        "solo estudio": "No trabajo",
        "solo estudiar": "No trabajo",
        "En este momento solo me encuentro estudiando": "No trabajo",
        "Solo estudio,": "No trabajo",
        "Estudiante auxiliar división de extensión": "No trabajo",
        "Estudiar": "No trabajo",
        "Estudio y busco trabajo para mi manutención": "No trabajo",
        "Ninguna, solo estudiar": "No trabajo",
        "Buscando un trabajo fijo porque no tengo ingresos fijos como tal,": "No trabajo",
        "solo estudio": "No trabajo",
        "EUN": "No trabajo",
        "Estudiante y vinculado al programa promotores": "No trabajo",
        "Curso virtuales MinTic, trabajos ocasionales, entrenamiento deportivo equipo de softbol UNAL": "No trabajo",
        "Estudiante auxiliar división de extensión": "No trabajo",
        "Curso de 45 horas del sena los viernes de 8 a 12": "No trabajo",
        "Taller de dibujo": "No trabajo",
        "Estudiante auxiliar en un grupo de investigación": "investigacion",
        "Programa ONE y grupo de programacion competitiva de la un": "investigacion",
        "Hago parte de dos grupos de investigación de la facultad": "investigacion",
        "Semillero de investigación": "investigacion",
        "Actualmente ando en proceso de vincularme a un semillero de investigación (SIGREH) y me me desempeño como auxiliar de espacios en las tutorías con ingenio": "investigacion",
        "Semillero de Investigación - SIHU": "investigacion",
        "Hago parte del semillero de investigación Quantum Computing y Crea-lo": "investigacion",
        "Particiapacion en grupo Inovate": "investigacion",
        "Participo en el grupo de investigación con el cual realicé mi práctica universitaria el semestre pasado,": "investigacion",
        "Ayuda social": "No trabajo",
        "Participación en orquesta Sonora latina de la UNAL": "No trabajo",
        "Participo del grupo institucional de tango": "No trabajo",
        "selección futbol sala fem": "deporte",
        "Práctico Futbol en la Universidad Nacional": "deporte",
        "Selección de ajedrez": "deporte",
        "Integrante del Grupo de Salsa de la Universidad Nacional": "deporte",
        "Ejercicio, hora media al día": "deporte",
        "DEPORTE": "deporte",
        "Entrenamiento": "deporte",
        "Practicar joropo y andar en bicicleta los fines de semana": "deporte",
        "NINGUNA": "No trabajo",
        "Ninguna": "No trabajo",
        "No trabajo": "No trabajo",
        "Ninguna de momento": "No trabajo",
        "investigacion": "investigacion",
        "estudiar": "No trabajo",
        "Trabajo": "Trabajo",
        "No trabajo": "No trabajo",
        "No": "No trabajo",
        "Horas de corresponsabilidad": "No trabajo",
        "Ninguna, y necesito trabajo para mis gastos :(": "No trabajo",
        "Voy a la iglesia": "No trabajo",
        "Tomo clases de baile (Salsa) en los talleres libres de la Universidad, actividad física desde casa, asistencia a Lunes de organización en la Universidad": "deporte",
        "deporte": "deporte",
        "Ninguna": "No trabajo",
        "Trabajo para mantenerme y mantener a mi hija,": "Trabajo",
        "Realizar y vender algunas artesanías": "Trabajo",
        "Práctico Futbol en la Universidad Nacional": "deporte",
        "Trabajar": "Trabajo",
        "Selección de ajedrez": "deporte",
        "": 0,
        "solo estudio": "No trabajo",
        "Estudiar, e ir al gimnasio y transportarme en Bogotá que es un martirio": "No trabajo",
        "Ejercicio, hora media al día": "deporte",
        "no": "No trabajo",
        "aclaro el monto del becariato : 191000/mes": "No trabajo",
        "Trabajo algunos fines de semana": "Trabajo",
        "Estudio y busco trabajo para mi manutención": "Trabajo",
        "semilleros de investigación": "investigacion",
        "Jugador de la selección masculina de baloncesto de la universidad, director de finanzas de ANEIAP del capítulo de la universidad sede Bogotá,": "deporte",
        "Tesis": "investigacion",
        "Curso amcharm de 2 a 6 todos los días": "No trabajo",
        "NO": "No trabajo",
        "No": "No trabajo",
        "No trabajo": "No trabajo",
        0: "No trabajo",
        "No trabajo": "No trabajo",
        "Ninguna de momento": "No trabajo",
        "investigacion": "investigacion",
        "Trabajo": "Trabajo",
        "Horas de corresponsabilidad": "No trabajo",
        "Tomo clases de baile (Salsa) en los talleres libres de la Universidad, actividad física desde casa, asistencia a Lunes de organización en la Universidad": "deporte",
        "deporte": "deporte",
        "Ninguna ": "No trabajo",
        "Realizar y vender algunas artesanías": "Trabajo",
        "ninguna": "No trabajo",
        "Práctico Futbol en la Universidad Nacional": "deporte",
        "Trabajar ": "Trabajo",
        "Selección de ajedrez": "deporte",
        "": "No trabajo",
        "solo estudio": "No trabajo",
        "Estudiar, e ir al gimnasio y transportarme en Bogotá que es un martirio": "No trabajo",
        "Ejercicio, hora media al día": "deporte",
        "Trabajo algunos fines de semana": "Trabajo",
        "Estudio y busco trabajo para mi manutención": "Trabajo",
        "No ": "No trabajo",
        float("nan"): "No trabajo",
        "Ninguna de momento ": "No trabajo",
        "Tomo clases de baile (Salsa) en los talleres libres de la Universidad, actividad física desde casa, asistencia a Lunes de organización en la Universidad ": "deporte",
        "Realizar y vender algunas artesanías ": "Trabajo",
        "Horas de corresponsabilidad ": "No trabajo",
        "Práctico Futbol en la Universidad Nacional ": "deporte",
        "Selección de ajedrez ": "deporte",
        "solo estudio ": "No trabajo",
        " ": "No trabajo",
        "Estudiar, e ir al gimnasio y transportarme en Bogotá que es un martirio ": "No trabajo",
        "Ejercicio, hora media al día ": "No trabajo",
        "Trabajo algunos fines de semana ": "Trabajo",
        "Estudio y busco trabajo para mi manutención ": "No trabajo",
    }
)

df["otras_actividades_actuales"].fillna(0, inplace=True)

df["tipo_involucramiento_anterior"] = df["tipo_involucramiento_anterior"].fillna(
    "Ninguna"
)


df["convocatorias_anteriores_bienestar"] = df[
    "convocatorias_anteriores_bienestar"
].replace(
    {
        "NINGUNA": 0,
        float("nan"): 0,
        "ninguna": 0,
        "No he estado vinculado a ninguna convocatoria de la facultad; sin embargo he sido participe del programa de practica colombia": 1,
        "Ninguna": 0,
        "No aplica": 0,
        "Ninguna ": 0,
        "N,A": 0,
        "2021-1 y 2022-1": 2,
        "UNA": 1,
    }
)


# Esto se hace para categorizar el texto de vulnerabilidad en 4 categorias
# 0: vulnerabilidad economica minima,
# 1: vulnerabilidad economica baja,
# 2: vulnerabilidad economica moderada,
# 3 vulnerabilidad economica alta

import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans

# Descargar los recursos necesarios de NLTK
nltk.download("omw-1.4")
nltk.download("punkt")
nltk.download("stopwords")
nltk.download("wordnet")

descriptions = df["explicacion_vulnerabilidad"]
# Preprocesamiento de las descripciones

# Preprocesamiento de las descripciones
stop_words = set(stopwords.words("spanish"))
lemmatizer = WordNetLemmatizer()

preprocessed_descriptions = []
valid_indices = []  # Almacena los índices válidos

for i, description in enumerate(df["explicacion_vulnerabilidad"]):
    # Verificar si el elemento es de tipo str
    if isinstance(description, str):
        # Tokenización de las palabras
        tokens = word_tokenize(description.lower())

        # Eliminación de las palabras de parada (stop words)
        tokens = [token for token in tokens if token not in stop_words]

        # Lematización de las palabras
        tokens = [lemmatizer.lemmatize(token) for token in tokens]

        preprocessed_descriptions.append(" ".join(tokens))
        valid_indices.append(i)  # Registrar el índice válido

# Extracción de características con TF-IDF
vectorizer = TfidfVectorizer()
feature_matrix = vectorizer.fit_transform(preprocessed_descriptions)

# Agrupamiento de las descripciones con K-means
num_clusters = 4
kmeans = KMeans(n_clusters=num_clusters, random_state=17)
kmeans.fit(feature_matrix)

# Asignar cada descripción a una categoría
categories = kmeans.predict(feature_matrix)

# Agregar la columna de categoría al DataFrame
df.loc[valid_indices, "categoria"] = categories

# Llenar los valores faltantes con cero

df["categoria"].fillna(0, inplace=True)


# Los datos representan categorias y no numeros float, estamos trabajando con una variable cualitativa
df["categoria"] = df["categoria"].apply(lambda x: str(x))


# Despues de encontrar las categorias podemos eliminar la columna
del df["explicacion_vulnerabilidad"]
# eliminar segun criterio investigador
del df["condiciones_vulnerabilidad_seleccionadas"]
# se elimina esta columna no es importante criterio investigador
del df["resolucion_y_ano_involucramiento_anterior"]


# LLenar los valores faltantes con cero
df["padre/madre/embarazo"].fillna(0, inplace=True)
df["discapacidad_permanente"].fillna(0, inplace=True)
df["estudiante_foraneo_sin_admsion_especial"].fillna(0, inplace=True)
df["padre_o_madre_fallecido"].fillna(0, inplace=True)
df["paes_peama_victima_conflicto"].fillna(0, inplace=True)
df["progeso_menor_50"].fillna(0, inplace=True)
df["vulnerabilidad_academica"].fillna(0, inplace=True)
df["otros_evaluados_bienestar"].fillna(0, inplace=True)


df.info()

df.isna().sum()


df.to_csv("../data/data_clean.csv", index=False)
